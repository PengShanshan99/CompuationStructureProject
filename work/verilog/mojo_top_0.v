/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg mole2,
    output reg mole3,
    output reg mole4,
    output reg mole5,
    output reg mole6,
    output reg mole7,
    output reg mole8,
    output reg mole9,
    output reg mole10,
    output reg mole11,
    input mallet2,
    input mallet3,
    input mallet4,
    input mallet5,
    input mallet6,
    input mallet7,
    input mallet8,
    input mallet9,
    input mallet10,
    input mallet11,
    output reg point1,
    output reg point2,
    output reg point3,
    output reg point4,
    output reg point5,
    output reg point6,
    output reg point7,
    output reg point8,
    output reg point9,
    output reg point10
  );
  
  
  
  reg rst;
  
  reg inPause;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_mylightup_1_out;
  wire [1-1:0] M_mylightup_1_mole1Up;
  wire [1-1:0] M_mylightup_1_mole2Up;
  wire [1-1:0] M_mylightup_1_mole3Up;
  wire [1-1:0] M_mylightup_1_mole4Up;
  wire [1-1:0] M_mylightup_1_mole5Up;
  wire [1-1:0] M_mylightup_1_mole6Up;
  wire [1-1:0] M_mylightup_1_mole7Up;
  wire [1-1:0] M_mylightup_1_mole8Up;
  wire [1-1:0] M_mylightup_1_mole9Up;
  wire [1-1:0] M_mylightup_1_mole10Up;
  wire [1-1:0] M_mylightup_1_mole11Up;
  wire [6-1:0] M_mylightup_1_moleNum;
  reg [7-1:0] M_mylightup_1_timer1;
  reg [7-1:0] M_mylightup_1_timer2;
  reg [7-1:0] M_mylightup_1_timer3;
  reg [7-1:0] M_mylightup_1_timer4;
  reg [7-1:0] M_mylightup_1_timer5;
  reg [7-1:0] M_mylightup_1_timer6;
  reg [7-1:0] M_mylightup_1_timer7;
  reg [7-1:0] M_mylightup_1_timer8;
  reg [7-1:0] M_mylightup_1_timer9;
  reg [7-1:0] M_mylightup_1_timer10;
  reg [7-1:0] M_mylightup_1_timer11;
  reg [1-1:0] M_mylightup_1_pause;
  lightup_1_2 mylightup_1 (
    .clk(clk),
    .rst(rst),
    .timer1(M_mylightup_1_timer1),
    .timer2(M_mylightup_1_timer2),
    .timer3(M_mylightup_1_timer3),
    .timer4(M_mylightup_1_timer4),
    .timer5(M_mylightup_1_timer5),
    .timer6(M_mylightup_1_timer6),
    .timer7(M_mylightup_1_timer7),
    .timer8(M_mylightup_1_timer8),
    .timer9(M_mylightup_1_timer9),
    .timer10(M_mylightup_1_timer10),
    .timer11(M_mylightup_1_timer11),
    .pause(M_mylightup_1_pause),
    .out(M_mylightup_1_out),
    .mole1Up(M_mylightup_1_mole1Up),
    .mole2Up(M_mylightup_1_mole2Up),
    .mole3Up(M_mylightup_1_mole3Up),
    .mole4Up(M_mylightup_1_mole4Up),
    .mole5Up(M_mylightup_1_mole5Up),
    .mole6Up(M_mylightup_1_mole6Up),
    .mole7Up(M_mylightup_1_mole7Up),
    .mole8Up(M_mylightup_1_mole8Up),
    .mole9Up(M_mylightup_1_mole9Up),
    .mole10Up(M_mylightup_1_mole10Up),
    .mole11Up(M_mylightup_1_mole11Up),
    .moleNum(M_mylightup_1_moleNum)
  );
  wire [1-1:0] M_mylightup_2_out;
  wire [1-1:0] M_mylightup_2_mole1Up;
  wire [1-1:0] M_mylightup_2_mole2Up;
  wire [1-1:0] M_mylightup_2_mole3Up;
  wire [1-1:0] M_mylightup_2_mole4Up;
  wire [1-1:0] M_mylightup_2_mole5Up;
  wire [1-1:0] M_mylightup_2_mole6Up;
  wire [1-1:0] M_mylightup_2_mole7Up;
  wire [1-1:0] M_mylightup_2_mole8Up;
  wire [1-1:0] M_mylightup_2_mole9Up;
  wire [1-1:0] M_mylightup_2_mole10Up;
  wire [1-1:0] M_mylightup_2_mole11Up;
  wire [6-1:0] M_mylightup_2_moleNum;
  reg [7-1:0] M_mylightup_2_timer1;
  reg [7-1:0] M_mylightup_2_timer2;
  reg [7-1:0] M_mylightup_2_timer3;
  reg [7-1:0] M_mylightup_2_timer4;
  reg [7-1:0] M_mylightup_2_timer5;
  reg [7-1:0] M_mylightup_2_timer6;
  reg [7-1:0] M_mylightup_2_timer7;
  reg [7-1:0] M_mylightup_2_timer8;
  reg [7-1:0] M_mylightup_2_timer9;
  reg [7-1:0] M_mylightup_2_timer10;
  reg [7-1:0] M_mylightup_2_timer11;
  reg [1-1:0] M_mylightup_2_pause;
  lightup_2_3 mylightup_2 (
    .clk(clk),
    .rst(rst),
    .timer1(M_mylightup_2_timer1),
    .timer2(M_mylightup_2_timer2),
    .timer3(M_mylightup_2_timer3),
    .timer4(M_mylightup_2_timer4),
    .timer5(M_mylightup_2_timer5),
    .timer6(M_mylightup_2_timer6),
    .timer7(M_mylightup_2_timer7),
    .timer8(M_mylightup_2_timer8),
    .timer9(M_mylightup_2_timer9),
    .timer10(M_mylightup_2_timer10),
    .timer11(M_mylightup_2_timer11),
    .pause(M_mylightup_2_pause),
    .out(M_mylightup_2_out),
    .mole1Up(M_mylightup_2_mole1Up),
    .mole2Up(M_mylightup_2_mole2Up),
    .mole3Up(M_mylightup_2_mole3Up),
    .mole4Up(M_mylightup_2_mole4Up),
    .mole5Up(M_mylightup_2_mole5Up),
    .mole6Up(M_mylightup_2_mole6Up),
    .mole7Up(M_mylightup_2_mole7Up),
    .mole8Up(M_mylightup_2_mole8Up),
    .mole9Up(M_mylightup_2_mole9Up),
    .mole10Up(M_mylightup_2_mole10Up),
    .mole11Up(M_mylightup_2_mole11Up),
    .moleNum(M_mylightup_2_moleNum)
  );
  wire [1-1:0] M_mylightup_3_out;
  wire [1-1:0] M_mylightup_3_mole1Up;
  wire [1-1:0] M_mylightup_3_mole2Up;
  wire [1-1:0] M_mylightup_3_mole3Up;
  wire [1-1:0] M_mylightup_3_mole4Up;
  wire [1-1:0] M_mylightup_3_mole5Up;
  wire [1-1:0] M_mylightup_3_mole6Up;
  wire [1-1:0] M_mylightup_3_mole7Up;
  wire [1-1:0] M_mylightup_3_mole8Up;
  wire [1-1:0] M_mylightup_3_mole9Up;
  wire [1-1:0] M_mylightup_3_mole10Up;
  wire [1-1:0] M_mylightup_3_mole11Up;
  wire [6-1:0] M_mylightup_3_moleNum;
  reg [7-1:0] M_mylightup_3_timer1;
  reg [7-1:0] M_mylightup_3_timer2;
  reg [7-1:0] M_mylightup_3_timer3;
  reg [7-1:0] M_mylightup_3_timer4;
  reg [7-1:0] M_mylightup_3_timer5;
  reg [7-1:0] M_mylightup_3_timer6;
  reg [7-1:0] M_mylightup_3_timer7;
  reg [7-1:0] M_mylightup_3_timer8;
  reg [7-1:0] M_mylightup_3_timer9;
  reg [7-1:0] M_mylightup_3_timer10;
  reg [7-1:0] M_mylightup_3_timer11;
  reg [1-1:0] M_mylightup_3_pause;
  lightup_3_4 mylightup_3 (
    .clk(clk),
    .rst(rst),
    .timer1(M_mylightup_3_timer1),
    .timer2(M_mylightup_3_timer2),
    .timer3(M_mylightup_3_timer3),
    .timer4(M_mylightup_3_timer4),
    .timer5(M_mylightup_3_timer5),
    .timer6(M_mylightup_3_timer6),
    .timer7(M_mylightup_3_timer7),
    .timer8(M_mylightup_3_timer8),
    .timer9(M_mylightup_3_timer9),
    .timer10(M_mylightup_3_timer10),
    .timer11(M_mylightup_3_timer11),
    .pause(M_mylightup_3_pause),
    .out(M_mylightup_3_out),
    .mole1Up(M_mylightup_3_mole1Up),
    .mole2Up(M_mylightup_3_mole2Up),
    .mole3Up(M_mylightup_3_mole3Up),
    .mole4Up(M_mylightup_3_mole4Up),
    .mole5Up(M_mylightup_3_mole5Up),
    .mole6Up(M_mylightup_3_mole6Up),
    .mole7Up(M_mylightup_3_mole7Up),
    .mole8Up(M_mylightup_3_mole8Up),
    .mole9Up(M_mylightup_3_mole9Up),
    .mole10Up(M_mylightup_3_mole10Up),
    .mole11Up(M_mylightup_3_mole11Up),
    .moleNum(M_mylightup_3_moleNum)
  );
  wire [1-1:0] M_mylightup_4_out;
  wire [1-1:0] M_mylightup_4_mole1Up;
  wire [1-1:0] M_mylightup_4_mole2Up;
  wire [1-1:0] M_mylightup_4_mole3Up;
  wire [1-1:0] M_mylightup_4_mole4Up;
  wire [1-1:0] M_mylightup_4_mole5Up;
  wire [1-1:0] M_mylightup_4_mole6Up;
  wire [1-1:0] M_mylightup_4_mole7Up;
  wire [1-1:0] M_mylightup_4_mole8Up;
  wire [1-1:0] M_mylightup_4_mole9Up;
  wire [1-1:0] M_mylightup_4_mole10Up;
  wire [1-1:0] M_mylightup_4_mole11Up;
  wire [6-1:0] M_mylightup_4_moleNum;
  reg [7-1:0] M_mylightup_4_timer1;
  reg [7-1:0] M_mylightup_4_timer2;
  reg [7-1:0] M_mylightup_4_timer3;
  reg [7-1:0] M_mylightup_4_timer4;
  reg [7-1:0] M_mylightup_4_timer5;
  reg [7-1:0] M_mylightup_4_timer6;
  reg [7-1:0] M_mylightup_4_timer7;
  reg [7-1:0] M_mylightup_4_timer8;
  reg [7-1:0] M_mylightup_4_timer9;
  reg [7-1:0] M_mylightup_4_timer10;
  reg [7-1:0] M_mylightup_4_timer11;
  reg [1-1:0] M_mylightup_4_pause;
  lightup_4_5 mylightup_4 (
    .clk(clk),
    .rst(rst),
    .timer1(M_mylightup_4_timer1),
    .timer2(M_mylightup_4_timer2),
    .timer3(M_mylightup_4_timer3),
    .timer4(M_mylightup_4_timer4),
    .timer5(M_mylightup_4_timer5),
    .timer6(M_mylightup_4_timer6),
    .timer7(M_mylightup_4_timer7),
    .timer8(M_mylightup_4_timer8),
    .timer9(M_mylightup_4_timer9),
    .timer10(M_mylightup_4_timer10),
    .timer11(M_mylightup_4_timer11),
    .pause(M_mylightup_4_pause),
    .out(M_mylightup_4_out),
    .mole1Up(M_mylightup_4_mole1Up),
    .mole2Up(M_mylightup_4_mole2Up),
    .mole3Up(M_mylightup_4_mole3Up),
    .mole4Up(M_mylightup_4_mole4Up),
    .mole5Up(M_mylightup_4_mole5Up),
    .mole6Up(M_mylightup_4_mole6Up),
    .mole7Up(M_mylightup_4_mole7Up),
    .mole8Up(M_mylightup_4_mole8Up),
    .mole9Up(M_mylightup_4_mole9Up),
    .mole10Up(M_mylightup_4_mole10Up),
    .mole11Up(M_mylightup_4_mole11Up),
    .moleNum(M_mylightup_4_moleNum)
  );
  wire [1-1:0] M_mylightup_5_out;
  wire [1-1:0] M_mylightup_5_mole1Up;
  wire [1-1:0] M_mylightup_5_mole2Up;
  wire [1-1:0] M_mylightup_5_mole3Up;
  wire [1-1:0] M_mylightup_5_mole4Up;
  wire [1-1:0] M_mylightup_5_mole5Up;
  wire [1-1:0] M_mylightup_5_mole6Up;
  wire [1-1:0] M_mylightup_5_mole7Up;
  wire [1-1:0] M_mylightup_5_mole8Up;
  wire [1-1:0] M_mylightup_5_mole9Up;
  wire [1-1:0] M_mylightup_5_mole10Up;
  wire [1-1:0] M_mylightup_5_mole11Up;
  wire [6-1:0] M_mylightup_5_moleNum;
  reg [7-1:0] M_mylightup_5_timer1;
  reg [7-1:0] M_mylightup_5_timer2;
  reg [7-1:0] M_mylightup_5_timer3;
  reg [7-1:0] M_mylightup_5_timer4;
  reg [7-1:0] M_mylightup_5_timer5;
  reg [7-1:0] M_mylightup_5_timer6;
  reg [7-1:0] M_mylightup_5_timer7;
  reg [7-1:0] M_mylightup_5_timer8;
  reg [7-1:0] M_mylightup_5_timer9;
  reg [7-1:0] M_mylightup_5_timer10;
  reg [7-1:0] M_mylightup_5_timer11;
  reg [1-1:0] M_mylightup_5_pause;
  lightup_5_6 mylightup_5 (
    .clk(clk),
    .rst(rst),
    .timer1(M_mylightup_5_timer1),
    .timer2(M_mylightup_5_timer2),
    .timer3(M_mylightup_5_timer3),
    .timer4(M_mylightup_5_timer4),
    .timer5(M_mylightup_5_timer5),
    .timer6(M_mylightup_5_timer6),
    .timer7(M_mylightup_5_timer7),
    .timer8(M_mylightup_5_timer8),
    .timer9(M_mylightup_5_timer9),
    .timer10(M_mylightup_5_timer10),
    .timer11(M_mylightup_5_timer11),
    .pause(M_mylightup_5_pause),
    .out(M_mylightup_5_out),
    .mole1Up(M_mylightup_5_mole1Up),
    .mole2Up(M_mylightup_5_mole2Up),
    .mole3Up(M_mylightup_5_mole3Up),
    .mole4Up(M_mylightup_5_mole4Up),
    .mole5Up(M_mylightup_5_mole5Up),
    .mole6Up(M_mylightup_5_mole6Up),
    .mole7Up(M_mylightup_5_mole7Up),
    .mole8Up(M_mylightup_5_mole8Up),
    .mole9Up(M_mylightup_5_mole9Up),
    .mole10Up(M_mylightup_5_mole10Up),
    .mole11Up(M_mylightup_5_mole11Up),
    .moleNum(M_mylightup_5_moleNum)
  );
  wire [7-1:0] M_mytimer_easy_up1;
  wire [7-1:0] M_mytimer_easy_up2;
  wire [7-1:0] M_mytimer_easy_up3;
  wire [7-1:0] M_mytimer_easy_up4;
  wire [7-1:0] M_mytimer_easy_up5;
  wire [7-1:0] M_mytimer_easy_up6;
  wire [7-1:0] M_mytimer_easy_up7;
  wire [7-1:0] M_mytimer_easy_up8;
  wire [7-1:0] M_mytimer_easy_up9;
  wire [7-1:0] M_mytimer_easy_up10;
  wire [7-1:0] M_mytimer_easy_up11;
  wire [1-1:0] M_mytimer_easy_clkslow;
  timer_easy_7 mytimer_easy (
    .clk(clk),
    .rst(rst),
    .up1(M_mytimer_easy_up1),
    .up2(M_mytimer_easy_up2),
    .up3(M_mytimer_easy_up3),
    .up4(M_mytimer_easy_up4),
    .up5(M_mytimer_easy_up5),
    .up6(M_mytimer_easy_up6),
    .up7(M_mytimer_easy_up7),
    .up8(M_mytimer_easy_up8),
    .up9(M_mytimer_easy_up9),
    .up10(M_mytimer_easy_up10),
    .up11(M_mytimer_easy_up11),
    .clkslow(M_mytimer_easy_clkslow)
  );
  wire [1-1:0] M_mytimer_entry_out;
  wire [7-1:0] M_mytimer_entry_up1;
  wire [7-1:0] M_mytimer_entry_up2;
  wire [7-1:0] M_mytimer_entry_up3;
  wire [7-1:0] M_mytimer_entry_up4;
  wire [7-1:0] M_mytimer_entry_up5;
  wire [7-1:0] M_mytimer_entry_up6;
  wire [7-1:0] M_mytimer_entry_up7;
  wire [7-1:0] M_mytimer_entry_up8;
  wire [7-1:0] M_mytimer_entry_up9;
  wire [7-1:0] M_mytimer_entry_up10;
  wire [7-1:0] M_mytimer_entry_up11;
  timer_entry_level_8 mytimer_entry (
    .clk(clk),
    .rst(rst),
    .out(M_mytimer_entry_out),
    .up1(M_mytimer_entry_up1),
    .up2(M_mytimer_entry_up2),
    .up3(M_mytimer_entry_up3),
    .up4(M_mytimer_entry_up4),
    .up5(M_mytimer_entry_up5),
    .up6(M_mytimer_entry_up6),
    .up7(M_mytimer_entry_up7),
    .up8(M_mytimer_entry_up8),
    .up9(M_mytimer_entry_up9),
    .up10(M_mytimer_entry_up10),
    .up11(M_mytimer_entry_up11)
  );
  reg [7:0] M_debug_d, M_debug_q = 8'hff;
  reg [5:0] M_points_d, M_points_q = 6'h00;
  localparam TO_BEGIN_time_keeper = 3'd0;
  localparam ADDPOINT_time_keeper = 3'd1;
  localparam CLEAR_time_keeper = 3'd2;
  localparam PLAYING1_time_keeper = 3'd3;
  localparam PLAYING2_time_keeper = 3'd4;
  localparam PLAYING3_time_keeper = 3'd5;
  localparam PLAYING4_time_keeper = 3'd6;
  localparam PLAYING5_time_keeper = 3'd7;
  
  reg [2:0] M_time_keeper_d, M_time_keeper_q = TO_BEGIN_time_keeper;
  wire [1-1:0] M_myTimeKeeper_out;
  wire [1-1:0] M_myTimeKeeper_timeUp;
  reg [1-1:0] M_myTimeKeeper_start;
  reg [6-1:0] M_myTimeKeeper_moleNumber;
  timeKeeper_9 myTimeKeeper (
    .clk(clk),
    .rst(rst),
    .start(M_myTimeKeeper_start),
    .moleNumber(M_myTimeKeeper_moleNumber),
    .out(M_myTimeKeeper_out),
    .timeUp(M_myTimeKeeper_timeUp)
  );
  
  wire [16-1:0] M_aluadder_result;
  wire [1-1:0] M_aluadder_v;
  reg [16-1:0] M_aluadder_a;
  reg [16-1:0] M_aluadder_b;
  reg [6-1:0] M_aluadder_alufn;
  alu_10 aluadder (
    .a(M_aluadder_a),
    .b(M_aluadder_b),
    .alufn(M_aluadder_alufn),
    .result(M_aluadder_result),
    .v(M_aluadder_v)
  );
  
  wire [16-1:0] M_alushifter_result;
  wire [1-1:0] M_alushifter_v;
  reg [16-1:0] M_alushifter_a;
  reg [16-1:0] M_alushifter_b;
  reg [6-1:0] M_alushifter_alufn;
  alu_10 alushifter (
    .a(M_alushifter_a),
    .b(M_alushifter_b),
    .alufn(M_alushifter_alufn),
    .result(M_alushifter_result),
    .v(M_alushifter_v)
  );
  
  wire [16-1:0] M_alucomplt1_result;
  wire [1-1:0] M_alucomplt1_v;
  reg [16-1:0] M_alucomplt1_a;
  reg [16-1:0] M_alucomplt1_b;
  reg [6-1:0] M_alucomplt1_alufn;
  alu_10 alucomplt1 (
    .a(M_alucomplt1_a),
    .b(M_alucomplt1_b),
    .alufn(M_alucomplt1_alufn),
    .result(M_alucomplt1_result),
    .v(M_alucomplt1_v)
  );
  
  wire [16-1:0] M_alucomplt2_result;
  wire [1-1:0] M_alucomplt2_v;
  reg [16-1:0] M_alucomplt2_a;
  reg [16-1:0] M_alucomplt2_b;
  reg [6-1:0] M_alucomplt2_alufn;
  alu_10 alucomplt2 (
    .a(M_alucomplt2_a),
    .b(M_alucomplt2_b),
    .alufn(M_alucomplt2_alufn),
    .result(M_alucomplt2_result),
    .v(M_alucomplt2_v)
  );
  
  wire [16-1:0] M_alucomplt3_result;
  wire [1-1:0] M_alucomplt3_v;
  reg [16-1:0] M_alucomplt3_a;
  reg [16-1:0] M_alucomplt3_b;
  reg [6-1:0] M_alucomplt3_alufn;
  alu_10 alucomplt3 (
    .a(M_alucomplt3_a),
    .b(M_alucomplt3_b),
    .alufn(M_alucomplt3_alufn),
    .result(M_alucomplt3_result),
    .v(M_alucomplt3_v)
  );
  
  wire [16-1:0] M_alucomplt4_result;
  wire [1-1:0] M_alucomplt4_v;
  reg [16-1:0] M_alucomplt4_a;
  reg [16-1:0] M_alucomplt4_b;
  reg [6-1:0] M_alucomplt4_alufn;
  alu_10 alucomplt4 (
    .a(M_alucomplt4_a),
    .b(M_alucomplt4_b),
    .alufn(M_alucomplt4_alufn),
    .result(M_alucomplt4_result),
    .v(M_alucomplt4_v)
  );
  
  wire [16-1:0] M_alucomplt5_result;
  wire [1-1:0] M_alucomplt5_v;
  reg [16-1:0] M_alucomplt5_a;
  reg [16-1:0] M_alucomplt5_b;
  reg [6-1:0] M_alucomplt5_alufn;
  alu_10 alucomplt5 (
    .a(M_alucomplt5_a),
    .b(M_alucomplt5_b),
    .alufn(M_alucomplt5_alufn),
    .result(M_alucomplt5_result),
    .v(M_alucomplt5_v)
  );
  
  wire [16-1:0] M_alucomplt6_result;
  wire [1-1:0] M_alucomplt6_v;
  reg [16-1:0] M_alucomplt6_a;
  reg [16-1:0] M_alucomplt6_b;
  reg [6-1:0] M_alucomplt6_alufn;
  alu_10 alucomplt6 (
    .a(M_alucomplt6_a),
    .b(M_alucomplt6_b),
    .alufn(M_alucomplt6_alufn),
    .result(M_alucomplt6_result),
    .v(M_alucomplt6_v)
  );
  
  wire [16-1:0] M_alucomplt7_result;
  wire [1-1:0] M_alucomplt7_v;
  reg [16-1:0] M_alucomplt7_a;
  reg [16-1:0] M_alucomplt7_b;
  reg [6-1:0] M_alucomplt7_alufn;
  alu_10 alucomplt7 (
    .a(M_alucomplt7_a),
    .b(M_alucomplt7_b),
    .alufn(M_alucomplt7_alufn),
    .result(M_alucomplt7_result),
    .v(M_alucomplt7_v)
  );
  
  wire [16-1:0] M_alucomplt8_result;
  wire [1-1:0] M_alucomplt8_v;
  reg [16-1:0] M_alucomplt8_a;
  reg [16-1:0] M_alucomplt8_b;
  reg [6-1:0] M_alucomplt8_alufn;
  alu_10 alucomplt8 (
    .a(M_alucomplt8_a),
    .b(M_alucomplt8_b),
    .alufn(M_alucomplt8_alufn),
    .result(M_alucomplt8_result),
    .v(M_alucomplt8_v)
  );
  
  wire [16-1:0] M_alucomplt9_result;
  wire [1-1:0] M_alucomplt9_v;
  reg [16-1:0] M_alucomplt9_a;
  reg [16-1:0] M_alucomplt9_b;
  reg [6-1:0] M_alucomplt9_alufn;
  alu_10 alucomplt9 (
    .a(M_alucomplt9_a),
    .b(M_alucomplt9_b),
    .alufn(M_alucomplt9_alufn),
    .result(M_alucomplt9_result),
    .v(M_alucomplt9_v)
  );
  
  wire [16-1:0] M_alucomplt10_result;
  wire [1-1:0] M_alucomplt10_v;
  reg [16-1:0] M_alucomplt10_a;
  reg [16-1:0] M_alucomplt10_b;
  reg [6-1:0] M_alucomplt10_alufn;
  alu_10 alucomplt10 (
    .a(M_alucomplt10_a),
    .b(M_alucomplt10_b),
    .alufn(M_alucomplt10_alufn),
    .result(M_alucomplt10_result),
    .v(M_alucomplt10_v)
  );
  
  wire [16-1:0] M_aluand1_result;
  wire [1-1:0] M_aluand1_v;
  reg [16-1:0] M_aluand1_a;
  reg [16-1:0] M_aluand1_b;
  reg [6-1:0] M_aluand1_alufn;
  alu_10 aluand1 (
    .a(M_aluand1_a),
    .b(M_aluand1_b),
    .alufn(M_aluand1_alufn),
    .result(M_aluand1_result),
    .v(M_aluand1_v)
  );
  
  wire [16-1:0] M_aluand2_result;
  wire [1-1:0] M_aluand2_v;
  reg [16-1:0] M_aluand2_a;
  reg [16-1:0] M_aluand2_b;
  reg [6-1:0] M_aluand2_alufn;
  alu_10 aluand2 (
    .a(M_aluand2_a),
    .b(M_aluand2_b),
    .alufn(M_aluand2_alufn),
    .result(M_aluand2_result),
    .v(M_aluand2_v)
  );
  
  wire [16-1:0] M_aluand3_result;
  wire [1-1:0] M_aluand3_v;
  reg [16-1:0] M_aluand3_a;
  reg [16-1:0] M_aluand3_b;
  reg [6-1:0] M_aluand3_alufn;
  alu_10 aluand3 (
    .a(M_aluand3_a),
    .b(M_aluand3_b),
    .alufn(M_aluand3_alufn),
    .result(M_aluand3_result),
    .v(M_aluand3_v)
  );
  
  wire [16-1:0] M_aluand4_result;
  wire [1-1:0] M_aluand4_v;
  reg [16-1:0] M_aluand4_a;
  reg [16-1:0] M_aluand4_b;
  reg [6-1:0] M_aluand4_alufn;
  alu_10 aluand4 (
    .a(M_aluand4_a),
    .b(M_aluand4_b),
    .alufn(M_aluand4_alufn),
    .result(M_aluand4_result),
    .v(M_aluand4_v)
  );
  
  wire [16-1:0] M_aluand5_result;
  wire [1-1:0] M_aluand5_v;
  reg [16-1:0] M_aluand5_a;
  reg [16-1:0] M_aluand5_b;
  reg [6-1:0] M_aluand5_alufn;
  alu_10 aluand5 (
    .a(M_aluand5_a),
    .b(M_aluand5_b),
    .alufn(M_aluand5_alufn),
    .result(M_aluand5_result),
    .v(M_aluand5_v)
  );
  
  wire [16-1:0] M_aluand6_result;
  wire [1-1:0] M_aluand6_v;
  reg [16-1:0] M_aluand6_a;
  reg [16-1:0] M_aluand6_b;
  reg [6-1:0] M_aluand6_alufn;
  alu_10 aluand6 (
    .a(M_aluand6_a),
    .b(M_aluand6_b),
    .alufn(M_aluand6_alufn),
    .result(M_aluand6_result),
    .v(M_aluand6_v)
  );
  
  wire [16-1:0] M_aluand7_result;
  wire [1-1:0] M_aluand7_v;
  reg [16-1:0] M_aluand7_a;
  reg [16-1:0] M_aluand7_b;
  reg [6-1:0] M_aluand7_alufn;
  alu_10 aluand7 (
    .a(M_aluand7_a),
    .b(M_aluand7_b),
    .alufn(M_aluand7_alufn),
    .result(M_aluand7_result),
    .v(M_aluand7_v)
  );
  
  wire [16-1:0] M_aluand8_result;
  wire [1-1:0] M_aluand8_v;
  reg [16-1:0] M_aluand8_a;
  reg [16-1:0] M_aluand8_b;
  reg [6-1:0] M_aluand8_alufn;
  alu_10 aluand8 (
    .a(M_aluand8_a),
    .b(M_aluand8_b),
    .alufn(M_aluand8_alufn),
    .result(M_aluand8_result),
    .v(M_aluand8_v)
  );
  
  wire [16-1:0] M_aluand9_result;
  wire [1-1:0] M_aluand9_v;
  reg [16-1:0] M_aluand9_a;
  reg [16-1:0] M_aluand9_b;
  reg [6-1:0] M_aluand9_alufn;
  alu_10 aluand9 (
    .a(M_aluand9_a),
    .b(M_aluand9_b),
    .alufn(M_aluand9_alufn),
    .result(M_aluand9_result),
    .v(M_aluand9_v)
  );
  
  wire [16-1:0] M_aluand10_result;
  wire [1-1:0] M_aluand10_v;
  reg [16-1:0] M_aluand10_a;
  reg [16-1:0] M_aluand10_b;
  reg [6-1:0] M_aluand10_alufn;
  alu_10 aluand10 (
    .a(M_aluand10_a),
    .b(M_aluand10_b),
    .alufn(M_aluand10_alufn),
    .result(M_aluand10_result),
    .v(M_aluand10_v)
  );
  
  integer difficulty;
  
  integer pauseMole;
  
  wire [1-1:0] M_myPause_out;
  reg [1-1:0] M_myPause_start;
  singlePause_32 myPause (
    .clk(clk),
    .rst(rst),
    .start(M_myPause_start),
    .out(M_myPause_out)
  );
  
  always @* begin
    M_time_keeper_d = M_time_keeper_q;
    M_points_d = M_points_q;
    M_debug_d = M_debug_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_seg = 8'hff;
    io_sel = 4'hf;
    io_led[16+7-:8] = 8'h00;
    io_led[8+7-:8] = 8'h00;
    io_led[0+7-:8] = 8'h00;
    M_aluadder_a = 1'h0;
    M_aluadder_b = 1'h0;
    M_aluadder_alufn = 1'h0;
    M_alushifter_a = 1'h0;
    M_alushifter_b = 1'h0;
    M_alushifter_alufn = 17'h186a0;
    M_aluand1_a = 1'h0;
    M_aluand1_b = 1'h0;
    M_aluand1_alufn = 14'h2af8;
    M_aluand2_a = 1'h0;
    M_aluand2_b = 1'h0;
    M_aluand2_alufn = 14'h2af8;
    M_aluand3_a = 1'h0;
    M_aluand3_b = 1'h0;
    M_aluand3_alufn = 14'h2af8;
    M_aluand4_a = 1'h0;
    M_aluand4_b = 1'h0;
    M_aluand4_alufn = 14'h2af8;
    M_aluand5_a = 1'h0;
    M_aluand5_b = 1'h0;
    M_aluand5_alufn = 14'h2af8;
    M_aluand6_a = 1'h0;
    M_aluand6_b = 1'h0;
    M_aluand6_alufn = 14'h2af8;
    M_aluand7_a = 1'h0;
    M_aluand7_b = 1'h0;
    M_aluand7_alufn = 14'h2af8;
    M_aluand8_a = 1'h0;
    M_aluand8_b = 1'h0;
    M_aluand8_alufn = 14'h2af8;
    M_aluand9_a = 1'h0;
    M_aluand9_b = 1'h0;
    M_aluand9_alufn = 14'h2af8;
    M_aluand10_a = 1'h0;
    M_aluand10_b = 1'h0;
    M_aluand10_alufn = 14'h2af8;
    M_aluand1_a = 1'h0;
    M_aluand1_b = 1'h0;
    M_aluand1_alufn = 14'h2af8;
    pauseMole = 1'h0;
    M_myTimeKeeper_moleNumber = 1'h0;
    mole2 = 1'h0;
    mole3 = 1'h0;
    mole4 = 1'h0;
    mole5 = 1'h0;
    mole6 = 1'h0;
    mole7 = 1'h0;
    mole8 = 1'h0;
    mole9 = 1'h0;
    mole10 = 1'h0;
    mole11 = 1'h0;
    M_myTimeKeeper_start = 1'h0;
    led = M_debug_q;
    M_mylightup_1_timer1 = 1'h0;
    M_mylightup_1_timer2 = 1'h0;
    M_mylightup_1_timer3 = 1'h0;
    M_mylightup_1_timer4 = 1'h0;
    M_mylightup_1_timer5 = 1'h0;
    M_mylightup_1_timer6 = 1'h0;
    M_mylightup_1_timer7 = 1'h0;
    M_mylightup_1_timer8 = 1'h0;
    M_mylightup_1_timer9 = 1'h0;
    M_mylightup_1_timer10 = 1'h0;
    M_mylightup_1_timer11 = 1'h0;
    M_mylightup_2_timer1 = 1'h0;
    M_mylightup_2_timer2 = 1'h0;
    M_mylightup_2_timer3 = 1'h0;
    M_mylightup_2_timer4 = 1'h0;
    M_mylightup_2_timer5 = 1'h0;
    M_mylightup_2_timer6 = 1'h0;
    M_mylightup_2_timer7 = 1'h0;
    M_mylightup_2_timer8 = 1'h0;
    M_mylightup_2_timer9 = 1'h0;
    M_mylightup_2_timer10 = 1'h0;
    M_mylightup_2_timer11 = 1'h0;
    M_mylightup_3_timer1 = 1'h0;
    M_mylightup_3_timer2 = 1'h0;
    M_mylightup_3_timer3 = 1'h0;
    M_mylightup_3_timer4 = 1'h0;
    M_mylightup_3_timer5 = 1'h0;
    M_mylightup_3_timer6 = 1'h0;
    M_mylightup_3_timer7 = 1'h0;
    M_mylightup_3_timer8 = 1'h0;
    M_mylightup_3_timer9 = 1'h0;
    M_mylightup_3_timer10 = 1'h0;
    M_mylightup_3_timer11 = 1'h0;
    M_mylightup_4_timer1 = 1'h0;
    M_mylightup_4_timer2 = 1'h0;
    M_mylightup_4_timer3 = 1'h0;
    M_mylightup_4_timer4 = 1'h0;
    M_mylightup_4_timer5 = 1'h0;
    M_mylightup_4_timer6 = 1'h0;
    M_mylightup_4_timer7 = 1'h0;
    M_mylightup_4_timer8 = 1'h0;
    M_mylightup_4_timer9 = 1'h0;
    M_mylightup_4_timer10 = 1'h0;
    M_mylightup_4_timer11 = 1'h0;
    M_mylightup_5_timer1 = 1'h0;
    M_mylightup_5_timer2 = 1'h0;
    M_mylightup_5_timer3 = 1'h0;
    M_mylightup_5_timer4 = 1'h0;
    M_mylightup_5_timer5 = 1'h0;
    M_mylightup_5_timer6 = 1'h0;
    M_mylightup_5_timer7 = 1'h0;
    M_mylightup_5_timer8 = 1'h0;
    M_mylightup_5_timer9 = 1'h0;
    M_mylightup_5_timer10 = 1'h0;
    M_mylightup_5_timer11 = 1'h0;
    M_mylightup_1_pause = 1'h0;
    M_mylightup_2_pause = 1'h0;
    M_mylightup_3_pause = 1'h0;
    M_mylightup_4_pause = 1'h0;
    M_mylightup_5_pause = 1'h0;
    inPause = 1'h0;
    M_myPause_start = 1'h0;
    led = 8'h33;
    M_alucomplt1_a = 1'h1;
    M_alucomplt1_b = M_points_q;
    M_alucomplt1_alufn = 17'h1ae1f;
    M_alucomplt2_a = 2'h3;
    M_alucomplt2_b = M_points_q;
    M_alucomplt2_alufn = 17'h1ae1f;
    M_alucomplt4_a = 3'h4;
    M_alucomplt4_b = M_points_q;
    M_alucomplt4_alufn = 17'h1ae1f;
    M_alucomplt5_a = 3'h5;
    M_alucomplt5_b = M_points_q;
    M_alucomplt5_alufn = 17'h1ae1f;
    M_alucomplt6_a = 3'h6;
    M_alucomplt6_b = M_points_q;
    M_alucomplt6_alufn = 17'h1ae1f;
    M_alucomplt7_a = 3'h7;
    M_alucomplt7_b = M_points_q;
    M_alucomplt7_alufn = 17'h1ae1f;
    M_alucomplt8_a = 4'h8;
    M_alucomplt8_b = M_points_q;
    M_alucomplt8_alufn = 17'h1ae1f;
    M_alucomplt9_a = 4'h9;
    M_alucomplt9_b = M_points_q;
    M_alucomplt9_alufn = 17'h1ae1f;
    M_alucomplt10_a = 4'ha;
    M_alucomplt10_b = M_points_q;
    M_alucomplt10_alufn = 17'h1ae1f;
    M_alucomplt3_a = 4'hb;
    M_alucomplt3_b = M_points_q;
    M_alucomplt3_alufn = 17'h1ae1f;
    io_led[0+1+0-:1] = (M_alucomplt1_result);
    io_led[0+2+0-:1] = (M_alucomplt2_result);
    io_led[0+3+0-:1] = (M_alucomplt3_result);
    io_led[0+4+0-:1] = (M_alucomplt4_result);
    io_led[0+5+0-:1] = (M_alucomplt5_result);
    io_led[0+6+0-:1] = (M_alucomplt6_result);
    io_led[0+7+0-:1] = (M_alucomplt7_result);
    io_led[8+0+0-:1] = (M_alucomplt8_result);
    io_led[8+1+0-:1] = (M_alucomplt9_result);
    io_led[8+2+0-:1] = (M_alucomplt10_result);
    point1 = (M_alucomplt1_result);
    point2 = (M_alucomplt2_result);
    point3 = (M_alucomplt3_result);
    point4 = (M_alucomplt4_result);
    point5 = (M_alucomplt5_result);
    point6 = (M_alucomplt6_result);
    point7 = (M_alucomplt7_result);
    point8 = (M_alucomplt8_result);
    point9 = (M_alucomplt9_result);
    point10 = (M_alucomplt10_result);
    
    case (M_time_keeper_q)
      TO_BEGIN_time_keeper: begin
        M_debug_d = 8'hff;
        if (mallet2 == 1'h1) begin
          difficulty = 1'h1;
          M_time_keeper_d = PLAYING1_time_keeper;
        end
        if (mallet3 == 1'h1) begin
          difficulty = 2'h2;
          M_time_keeper_d = PLAYING2_time_keeper;
        end
        if (mallet4 == 1'h1) begin
          difficulty = 2'h3;
          M_time_keeper_d = PLAYING3_time_keeper;
        end
        if (mallet5 == 1'h1) begin
          difficulty = 3'h4;
          M_time_keeper_d = PLAYING4_time_keeper;
        end
        if (mallet6 == 1'h1) begin
          difficulty = 3'h5;
          M_time_keeper_d = PLAYING5_time_keeper;
        end
      end
      ADDPOINT_time_keeper: begin
        if (difficulty == 1'h1) begin
          M_mylightup_1_timer1 = M_mytimer_easy_up1;
          M_mylightup_1_timer2 = M_mytimer_entry_up2;
          M_mylightup_1_timer3 = M_mytimer_entry_up3;
          M_mylightup_1_timer4 = M_mytimer_entry_up4;
          M_mylightup_1_timer5 = M_mytimer_entry_up5;
          M_mylightup_1_timer6 = M_mytimer_entry_up6;
          M_mylightup_1_timer7 = M_mytimer_entry_up7;
          M_mylightup_1_timer8 = M_mytimer_entry_up8;
          M_mylightup_1_timer9 = M_mytimer_entry_up9;
          M_mylightup_1_timer10 = M_mytimer_entry_up10;
          M_mylightup_1_timer11 = M_mytimer_entry_up11;
          mole2 = M_mylightup_1_mole2Up;
          mole3 = M_mylightup_1_mole3Up;
          mole4 = M_mylightup_1_mole4Up;
          mole5 = M_mylightup_1_mole5Up;
          mole6 = M_mylightup_1_mole6Up;
          mole7 = M_mylightup_1_mole7Up;
          mole8 = M_mylightup_1_mole8Up;
          mole9 = M_mylightup_1_mole9Up;
          mole10 = M_mylightup_1_mole10Up;
          mole11 = M_mylightup_1_mole11Up;
        end
        if (difficulty == 2'h2) begin
          M_mylightup_2_timer1 = M_mytimer_easy_up1;
          M_mylightup_2_timer2 = M_mytimer_entry_up2;
          M_mylightup_2_timer3 = M_mytimer_entry_up3;
          M_mylightup_2_timer4 = M_mytimer_entry_up4;
          M_mylightup_2_timer5 = M_mytimer_entry_up5;
          M_mylightup_2_timer6 = M_mytimer_entry_up6;
          M_mylightup_2_timer7 = M_mytimer_entry_up7;
          M_mylightup_2_timer8 = M_mytimer_entry_up8;
          M_mylightup_2_timer9 = M_mytimer_entry_up9;
          M_mylightup_2_timer10 = M_mytimer_entry_up10;
          M_mylightup_2_timer11 = M_mytimer_entry_up11;
          mole2 = M_mylightup_2_mole2Up;
          mole3 = M_mylightup_2_mole3Up;
          mole4 = M_mylightup_2_mole4Up;
          mole5 = M_mylightup_2_mole5Up;
          mole6 = M_mylightup_2_mole6Up;
          mole7 = M_mylightup_2_mole7Up;
          mole8 = M_mylightup_2_mole8Up;
          mole9 = M_mylightup_2_mole9Up;
          mole10 = M_mylightup_2_mole10Up;
          mole11 = M_mylightup_2_mole11Up;
        end
        if (difficulty == 2'h3) begin
          M_mylightup_3_timer1 = M_mytimer_easy_up1;
          M_mylightup_3_timer2 = M_mytimer_easy_up2;
          M_mylightup_3_timer3 = M_mytimer_easy_up3;
          M_mylightup_3_timer4 = M_mytimer_easy_up4;
          M_mylightup_3_timer5 = M_mytimer_easy_up5;
          M_mylightup_3_timer6 = M_mytimer_easy_up6;
          M_mylightup_3_timer7 = M_mytimer_easy_up7;
          M_mylightup_3_timer8 = M_mytimer_easy_up8;
          M_mylightup_3_timer9 = M_mytimer_easy_up9;
          M_mylightup_3_timer10 = M_mytimer_easy_up10;
          M_mylightup_3_timer11 = M_mytimer_easy_up11;
          mole2 = M_mylightup_3_mole2Up;
          mole3 = M_mylightup_3_mole3Up;
          mole4 = M_mylightup_3_mole4Up;
          mole5 = M_mylightup_3_mole5Up;
          mole6 = M_mylightup_3_mole6Up;
          mole7 = M_mylightup_3_mole7Up;
          mole8 = M_mylightup_3_mole8Up;
          mole9 = M_mylightup_3_mole9Up;
          mole10 = M_mylightup_3_mole10Up;
          mole11 = M_mylightup_3_mole11Up;
        end
        if (difficulty == 3'h4) begin
          M_mylightup_4_timer1 = M_mytimer_easy_up1;
          M_mylightup_4_timer2 = M_mytimer_easy_up2;
          M_mylightup_4_timer3 = M_mytimer_easy_up3;
          M_mylightup_4_timer4 = M_mytimer_easy_up4;
          M_mylightup_4_timer5 = M_mytimer_easy_up5;
          M_mylightup_4_timer6 = M_mytimer_easy_up6;
          M_mylightup_4_timer7 = M_mytimer_easy_up7;
          M_mylightup_4_timer8 = M_mytimer_easy_up8;
          M_mylightup_4_timer9 = M_mytimer_easy_up9;
          M_mylightup_4_timer10 = M_mytimer_easy_up10;
          M_mylightup_4_timer11 = M_mytimer_easy_up11;
          mole2 = M_mylightup_4_mole2Up;
          mole3 = M_mylightup_4_mole3Up;
          mole4 = M_mylightup_4_mole4Up;
          mole5 = M_mylightup_4_mole5Up;
          mole6 = M_mylightup_4_mole6Up;
          mole7 = M_mylightup_4_mole7Up;
          mole8 = M_mylightup_4_mole8Up;
          mole9 = M_mylightup_4_mole9Up;
          mole10 = M_mylightup_4_mole10Up;
          mole11 = M_mylightup_4_mole11Up;
        end
        if (difficulty == 3'h5) begin
          M_mylightup_5_timer1 = M_mytimer_easy_up1;
          M_mylightup_5_timer2 = M_mytimer_easy_up2;
          M_mylightup_5_timer3 = M_mytimer_easy_up3;
          M_mylightup_5_timer4 = M_mytimer_easy_up4;
          M_mylightup_5_timer5 = M_mytimer_easy_up5;
          M_mylightup_5_timer6 = M_mytimer_easy_up6;
          M_mylightup_5_timer7 = M_mytimer_easy_up7;
          M_mylightup_5_timer8 = M_mytimer_easy_up8;
          M_mylightup_5_timer9 = M_mytimer_easy_up9;
          M_mylightup_5_timer10 = M_mytimer_easy_up10;
          M_mylightup_5_timer11 = M_mytimer_easy_up11;
          mole2 = M_mylightup_5_mole2Up;
          mole3 = M_mylightup_5_mole3Up;
          mole4 = M_mylightup_5_mole4Up;
          mole5 = M_mylightup_5_mole5Up;
          mole6 = M_mylightup_5_mole6Up;
          mole7 = M_mylightup_5_mole7Up;
          mole8 = M_mylightup_5_mole8Up;
          mole9 = M_mylightup_5_mole9Up;
          mole10 = M_mylightup_5_mole10Up;
          mole11 = M_mylightup_5_mole11Up;
        end
        led = 8'he0;
        io_led[16+1+0-:1] = inPause;
        io_led[16+2+0-:1] = 1'h1;
        io_led[16+3+0-:1] = 1'h1;
        M_mylightup_1_pause = pauseMole;
        M_myPause_start = 1'h1;
        inPause = 1'h1;
        if (M_myPause_out == 1'h1) begin
          inPause = 1'h0;
          pauseMole = 1'h0;
          M_myPause_start = 1'h0;
          if (difficulty == 1'h1) begin
            M_time_keeper_d = PLAYING1_time_keeper;
          end
          if (difficulty == 2'h2) begin
            M_time_keeper_d = PLAYING2_time_keeper;
          end
          if (difficulty == 2'h3) begin
            M_time_keeper_d = PLAYING3_time_keeper;
          end
          if (difficulty == 3'h4) begin
            M_time_keeper_d = PLAYING4_time_keeper;
          end
          if (difficulty == 3'h5) begin
            M_time_keeper_d = PLAYING5_time_keeper;
          end
        end
      end
      CLEAR_time_keeper: begin
        led = 8'haa;
        if (mallet2) begin
          rst = 1'h1;
        end
      end
      PLAYING1_time_keeper: begin
        led = 8'h01;
        M_myTimeKeeper_start = 1'h1;
        if (M_myTimeKeeper_timeUp) begin
          M_time_keeper_d = CLEAR_time_keeper;
        end
        io_led[0+0+0-:1] = M_myTimeKeeper_timeUp;
        M_myTimeKeeper_moleNumber = M_mylightup_1_moleNum;
        M_mylightup_1_timer1 = M_mytimer_entry_up1;
        M_mylightup_1_timer2 = M_mytimer_entry_up2;
        M_mylightup_1_timer3 = M_mytimer_entry_up3;
        M_mylightup_1_timer4 = M_mytimer_entry_up4;
        M_mylightup_1_timer5 = M_mytimer_entry_up5;
        M_mylightup_1_timer6 = M_mytimer_entry_up6;
        M_mylightup_1_timer7 = M_mytimer_entry_up7;
        M_mylightup_1_timer8 = M_mytimer_entry_up8;
        M_mylightup_1_timer9 = M_mytimer_entry_up9;
        M_mylightup_1_timer10 = M_mytimer_entry_up10;
        M_mylightup_1_timer11 = M_mytimer_entry_up11;
        mole2 = M_mylightup_1_mole2Up;
        mole3 = M_mylightup_1_mole3Up;
        mole4 = M_mylightup_1_mole4Up;
        mole5 = M_mylightup_1_mole5Up;
        mole6 = M_mylightup_1_mole6Up;
        mole7 = M_mylightup_1_mole7Up;
        mole8 = M_mylightup_1_mole8Up;
        mole9 = M_mylightup_1_mole9Up;
        mole10 = M_mylightup_1_mole10Up;
        mole11 = M_mylightup_1_mole11Up;
        M_aluand1_a = mallet2;
        M_aluand1_b = M_mylightup_1_mole2Up;
        if (M_aluand1_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole2 = 1'h0;
          pauseMole = 2'h2;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand2_a = mallet3;
        M_aluand2_b = M_mylightup_1_mole3Up;
        if (M_aluand2_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole3 = 1'h0;
          pauseMole = 2'h3;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand3_a = mallet4;
        M_aluand3_b = M_mylightup_1_mole4Up;
        if (M_aluand3_result == 1'h1) begin
          M_alushifter_a = M_points_q;
          M_alushifter_b = 1'h1;
          M_points_d = M_alushifter_result[0+5-:6];
          mole4 = 1'h0;
          pauseMole = 3'h4;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand4_a = mallet5;
        M_aluand4_b = M_mylightup_1_mole5Up;
        if (M_aluand4_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole5 = 1'h0;
          pauseMole = 3'h5;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand5_a = mallet6;
        M_aluand5_b = M_mylightup_1_mole6Up;
        if (M_aluand5_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole6 = 1'h0;
          pauseMole = 3'h6;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand6_a = mallet7;
        M_aluand6_b = M_mylightup_1_mole7Up;
        if (M_aluand6_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole7 = 1'h0;
          pauseMole = 3'h7;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand7_a = mallet8;
        M_aluand7_b = M_mylightup_1_mole8Up;
        if (M_aluand7_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole8 = 1'h0;
          pauseMole = 4'h8;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand8_a = mallet9;
        M_aluand8_b = M_mylightup_1_mole9Up;
        if (M_aluand8_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole9 = 1'h0;
          pauseMole = 4'h9;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand9_a = mallet10;
        M_aluand9_b = M_mylightup_1_mole10Up;
        if (M_aluand9_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole10 = 1'h0;
          pauseMole = 4'ha;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand10_a = mallet11;
        M_aluand10_b = M_mylightup_1_mole11Up;
        if (M_aluand10_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole11 = 1'h0;
          pauseMole = 4'hb;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
      end
      PLAYING2_time_keeper: begin
        M_debug_d = 1'h0;
        M_myTimeKeeper_start = 1'h1;
        if (M_myTimeKeeper_timeUp) begin
          M_time_keeper_d = CLEAR_time_keeper;
        end
        M_myTimeKeeper_moleNumber = M_mylightup_2_moleNum;
        M_mylightup_2_timer1 = M_mytimer_entry_up1;
        M_mylightup_2_timer2 = M_mytimer_entry_up2;
        M_mylightup_2_timer3 = M_mytimer_entry_up3;
        M_mylightup_2_timer4 = M_mytimer_entry_up4;
        M_mylightup_2_timer5 = M_mytimer_entry_up5;
        M_mylightup_2_timer6 = M_mytimer_entry_up6;
        M_mylightup_2_timer7 = M_mytimer_entry_up7;
        M_mylightup_2_timer8 = M_mytimer_entry_up8;
        M_mylightup_2_timer9 = M_mytimer_entry_up9;
        M_mylightup_2_timer10 = M_mytimer_entry_up10;
        M_mylightup_2_timer11 = M_mytimer_entry_up11;
        mole2 = M_mylightup_2_mole2Up;
        mole3 = M_mylightup_2_mole3Up;
        mole4 = M_mylightup_2_mole4Up;
        mole5 = M_mylightup_2_mole5Up;
        mole6 = M_mylightup_2_mole6Up;
        mole7 = M_mylightup_2_mole7Up;
        mole8 = M_mylightup_2_mole8Up;
        mole9 = M_mylightup_2_mole9Up;
        mole10 = M_mylightup_2_mole10Up;
        mole11 = M_mylightup_2_mole11Up;
        M_aluand1_a = mallet2;
        M_aluand1_b = M_mylightup_2_mole2Up;
        if (M_aluand1_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole2 = 1'h0;
          pauseMole = 2'h2;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand2_a = mallet3;
        M_aluand2_b = M_mylightup_2_mole3Up;
        if (M_aluand2_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole3 = 1'h0;
          pauseMole = 2'h3;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand3_a = mallet4;
        M_aluand3_b = M_mylightup_2_mole4Up;
        if (M_aluand3_result == 1'h1) begin
          M_alushifter_a = M_points_q;
          M_alushifter_b = 1'h1;
          M_points_d = M_alushifter_result[0+5-:6];
          mole4 = 1'h0;
          pauseMole = 3'h4;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand4_a = mallet5;
        M_aluand4_b = M_mylightup_2_mole5Up;
        if (M_aluand4_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole5 = 1'h0;
          pauseMole = 3'h5;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand5_a = mallet6;
        M_aluand5_b = M_mylightup_2_mole6Up;
        if (M_aluand5_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole6 = 1'h0;
          pauseMole = 3'h6;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand6_a = mallet7;
        M_aluand6_b = M_mylightup_2_mole7Up;
        if (M_aluand6_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole7 = 1'h0;
          pauseMole = 3'h7;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand7_a = mallet8;
        M_aluand7_b = M_mylightup_2_mole8Up;
        if (M_aluand7_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole8 = 1'h0;
          pauseMole = 4'h8;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand8_a = mallet9;
        M_aluand8_b = M_mylightup_2_mole9Up;
        if (M_aluand8_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole9 = 1'h0;
          pauseMole = 4'h9;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand9_a = mallet10;
        M_aluand9_b = M_mylightup_2_mole10Up;
        if (M_aluand9_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole10 = 1'h0;
          pauseMole = 4'ha;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand10_a = mallet11;
        M_aluand10_b = M_mylightup_2_mole11Up;
        if (M_aluand10_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole11 = 1'h0;
          pauseMole = 4'hb;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
      end
      PLAYING3_time_keeper: begin
        M_debug_d = 1'h0;
        M_myTimeKeeper_start = 1'h1;
        if (M_myTimeKeeper_timeUp) begin
          M_time_keeper_d = CLEAR_time_keeper;
        end
        M_myTimeKeeper_moleNumber = M_mylightup_3_moleNum;
        M_mylightup_3_timer1 = M_mytimer_easy_up1;
        M_mylightup_3_timer2 = M_mytimer_easy_up2;
        M_mylightup_3_timer3 = M_mytimer_easy_up3;
        M_mylightup_3_timer4 = M_mytimer_easy_up4;
        M_mylightup_3_timer5 = M_mytimer_easy_up5;
        M_mylightup_3_timer6 = M_mytimer_easy_up6;
        M_mylightup_3_timer7 = M_mytimer_easy_up7;
        M_mylightup_3_timer8 = M_mytimer_easy_up8;
        M_mylightup_3_timer9 = M_mytimer_easy_up9;
        M_mylightup_3_timer10 = M_mytimer_easy_up10;
        M_mylightup_3_timer11 = M_mytimer_easy_up11;
        mole2 = M_mylightup_3_mole2Up;
        mole3 = M_mylightup_3_mole3Up;
        mole4 = M_mylightup_3_mole4Up;
        mole5 = M_mylightup_3_mole5Up;
        mole6 = M_mylightup_3_mole6Up;
        mole7 = M_mylightup_3_mole7Up;
        mole8 = M_mylightup_3_mole8Up;
        mole9 = M_mylightup_3_mole9Up;
        mole10 = M_mylightup_3_mole10Up;
        mole11 = M_mylightup_3_mole11Up;
        M_aluand2_a = mallet3;
        M_aluand2_b = M_mylightup_3_mole3Up;
        if (M_aluand2_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole2 = 1'h0;
          pauseMole = 2'h2;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand3_a = mallet4;
        M_aluand3_b = M_mylightup_3_mole4Up;
        if (M_aluand3_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole3 = 1'h0;
          pauseMole = 2'h3;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand4_a = mallet5;
        M_aluand4_b = M_mylightup_3_mole5Up;
        if (M_aluand4_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole4 = 1'h0;
          pauseMole = 3'h4;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand5_a = mallet6;
        M_aluand5_b = M_mylightup_3_mole6Up;
        if (M_aluand5_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole5 = 1'h0;
          pauseMole = 3'h5;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand6_a = mallet7;
        M_aluand6_b = M_mylightup_3_mole7Up;
        if (M_aluand6_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole6 = 1'h0;
          pauseMole = 3'h6;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand7_a = mallet8;
        M_aluand7_b = M_mylightup_3_mole8Up;
        if (M_aluand7_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole7 = 1'h0;
          pauseMole = 3'h7;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand8_a = mallet9;
        M_aluand8_b = M_mylightup_3_mole9Up;
        if (M_aluand8_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole8 = 1'h0;
          pauseMole = 4'h8;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand9_a = mallet10;
        M_aluand9_b = M_mylightup_3_mole10Up;
        if (M_aluand9_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole9 = 1'h0;
          pauseMole = 4'h9;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand10_a = mallet11;
        M_aluand10_b = M_mylightup_3_mole11Up;
        if (M_aluand10_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole10 = 1'h0;
          pauseMole = 4'ha;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
      end
      PLAYING4_time_keeper: begin
        M_debug_d = 1'h0;
        M_myTimeKeeper_start = 1'h1;
        if (M_myTimeKeeper_timeUp) begin
          M_time_keeper_d = CLEAR_time_keeper;
        end
        M_myTimeKeeper_moleNumber = M_mylightup_4_moleNum;
        M_mylightup_4_timer1 = M_mytimer_easy_up1;
        M_mylightup_4_timer2 = M_mytimer_easy_up2;
        M_mylightup_4_timer3 = M_mytimer_easy_up3;
        M_mylightup_4_timer4 = M_mytimer_easy_up4;
        M_mylightup_4_timer5 = M_mytimer_easy_up5;
        M_mylightup_4_timer6 = M_mytimer_easy_up6;
        M_mylightup_4_timer7 = M_mytimer_easy_up7;
        M_mylightup_4_timer8 = M_mytimer_easy_up8;
        M_mylightup_4_timer9 = M_mytimer_easy_up9;
        M_mylightup_4_timer10 = M_mytimer_easy_up10;
        M_mylightup_4_timer11 = M_mytimer_easy_up11;
        mole2 = M_mylightup_4_mole2Up;
        mole3 = M_mylightup_4_mole3Up;
        mole4 = M_mylightup_4_mole4Up;
        mole5 = M_mylightup_4_mole5Up;
        mole6 = M_mylightup_4_mole6Up;
        mole7 = M_mylightup_4_mole7Up;
        mole8 = M_mylightup_4_mole8Up;
        mole9 = M_mylightup_4_mole9Up;
        mole10 = M_mylightup_4_mole10Up;
        mole11 = M_mylightup_4_mole11Up;
        M_aluand2_a = mallet3;
        M_aluand2_b = M_mylightup_4_mole3Up;
        if (M_aluand2_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole2 = 1'h0;
          pauseMole = 2'h2;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand3_a = mallet4;
        M_aluand3_b = M_mylightup_4_mole4Up;
        if (M_aluand3_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole3 = 1'h0;
          pauseMole = 2'h3;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand4_a = mallet5;
        M_aluand4_b = M_mylightup_4_mole5Up;
        if (M_aluand4_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole4 = 1'h0;
          pauseMole = 3'h4;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand5_a = mallet6;
        M_aluand5_b = M_mylightup_4_mole6Up;
        if (M_aluand5_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole5 = 1'h0;
          pauseMole = 3'h5;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand6_a = mallet7;
        M_aluand6_b = M_mylightup_4_mole7Up;
        if (M_aluand6_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole6 = 1'h0;
          pauseMole = 3'h6;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand7_a = mallet8;
        M_aluand7_b = M_mylightup_4_mole8Up;
        if (M_aluand7_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole7 = 1'h0;
          pauseMole = 3'h7;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand8_a = mallet9;
        M_aluand8_b = M_mylightup_4_mole9Up;
        if (M_aluand8_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole8 = 1'h0;
          pauseMole = 4'h8;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand9_a = mallet10;
        M_aluand9_b = M_mylightup_4_mole10Up;
        if (M_aluand9_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole9 = 1'h0;
          pauseMole = 4'h9;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand10_a = mallet11;
        M_aluand10_b = M_mylightup_4_mole11Up;
        if (M_aluand10_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole10 = 1'h0;
          pauseMole = 4'ha;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
      end
      PLAYING5_time_keeper: begin
        M_debug_d = 1'h0;
        M_myTimeKeeper_start = 1'h1;
        if (M_myTimeKeeper_timeUp) begin
          M_time_keeper_d = CLEAR_time_keeper;
        end
        M_myTimeKeeper_moleNumber = M_mylightup_5_moleNum;
        M_mylightup_5_timer1 = M_mytimer_easy_up1;
        M_mylightup_5_timer2 = M_mytimer_easy_up2;
        M_mylightup_5_timer3 = M_mytimer_easy_up3;
        M_mylightup_5_timer4 = M_mytimer_easy_up4;
        M_mylightup_5_timer5 = M_mytimer_easy_up5;
        M_mylightup_5_timer6 = M_mytimer_easy_up6;
        M_mylightup_5_timer7 = M_mytimer_easy_up7;
        M_mylightup_5_timer8 = M_mytimer_easy_up8;
        M_mylightup_5_timer9 = M_mytimer_easy_up9;
        M_mylightup_5_timer10 = M_mytimer_easy_up10;
        M_mylightup_5_timer11 = M_mytimer_easy_up11;
        mole2 = M_mylightup_5_mole2Up;
        mole3 = M_mylightup_5_mole3Up;
        mole4 = M_mylightup_5_mole4Up;
        mole5 = M_mylightup_5_mole5Up;
        mole6 = M_mylightup_5_mole6Up;
        mole7 = M_mylightup_5_mole7Up;
        mole8 = M_mylightup_5_mole8Up;
        mole9 = M_mylightup_5_mole9Up;
        mole10 = M_mylightup_5_mole10Up;
        mole11 = M_mylightup_5_mole11Up;
        M_aluand2_a = mallet3;
        M_aluand2_b = M_mylightup_5_mole3Up;
        if (M_aluand2_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole2 = 1'h0;
          pauseMole = 2'h2;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand3_a = mallet4;
        M_aluand3_b = M_mylightup_5_mole4Up;
        if (M_aluand3_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole3 = 1'h0;
          pauseMole = 2'h3;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand4_a = mallet5;
        M_aluand4_b = M_mylightup_5_mole5Up;
        if (M_aluand4_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole4 = 1'h0;
          pauseMole = 3'h4;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand5_a = mallet6;
        M_aluand5_b = M_mylightup_5_mole6Up;
        if (M_aluand5_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole5 = 1'h0;
          pauseMole = 3'h5;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand6_a = mallet7;
        M_aluand6_b = M_mylightup_5_mole7Up;
        if (M_aluand6_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole6 = 1'h0;
          pauseMole = 3'h6;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand7_a = mallet8;
        M_aluand7_b = M_mylightup_5_mole8Up;
        if (M_aluand7_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole7 = 1'h0;
          pauseMole = 3'h7;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand8_a = mallet9;
        M_aluand8_b = M_mylightup_5_mole9Up;
        if (M_aluand8_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole8 = 1'h0;
          pauseMole = 4'h8;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand9_a = mallet10;
        M_aluand9_b = M_mylightup_5_mole10Up;
        if (M_aluand9_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole9 = 1'h0;
          pauseMole = 4'h9;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
        M_aluand10_a = mallet11;
        M_aluand10_b = M_mylightup_5_mole11Up;
        if (M_aluand10_result == 1'h1) begin
          M_points_d = M_points_q + 1'h1;
          mole10 = 1'h0;
          pauseMole = 4'ha;
          M_time_keeper_d = ADDPOINT_time_keeper;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_time_keeper_q <= 1'h0;
    end else begin
      M_time_keeper_q <= M_time_keeper_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_debug_q <= 8'hff;
    end else begin
      M_debug_q <= M_debug_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_points_q <= 6'h00;
    end else begin
      M_points_q <= M_points_d;
    end
  end
  
endmodule
