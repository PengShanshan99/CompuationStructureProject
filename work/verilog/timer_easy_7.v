/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module timer_easy_7 (
    input clk,
    input rst,
    output reg [6:0] up1,
    output reg [6:0] up2,
    output reg [6:0] up3,
    output reg [6:0] up4,
    output reg [6:0] up5,
    output reg [6:0] up6,
    output reg [6:0] up7,
    output reg [6:0] up8,
    output reg [6:0] up9,
    output reg [6:0] up10,
    output reg [6:0] up11,
    output reg clkslow
  );
  
  
  
  reg [1:0] M_slowclk_d, M_slowclk_q = 1'h0;
  
  reg [23:0] M_counter1_d, M_counter1_q = 24'h800000;
  
  reg [23:0] M_counter2_d, M_counter2_q = 24'hd00000;
  
  reg [23:0] M_counter3_d, M_counter3_q = 24'h400000;
  
  reg [23:0] M_counter4_d, M_counter4_q = 24'h900000;
  
  reg [23:0] M_counter5_d, M_counter5_q = 24'hc00000;
  
  reg [23:0] M_counter6_d, M_counter6_q = 24'hb00000;
  
  reg [23:0] M_counter7_d, M_counter7_q = 88'hc69d452e88c9cc98c00000;
  
  reg [23:0] M_counter8_d, M_counter8_q = 24'hf00000;
  
  reg [23:0] M_counter9_d, M_counter9_q = 24'ha00000;
  
  reg [23:0] M_counter10_d, M_counter10_q = 24'he00000;
  
  reg [23:0] M_counter11_d, M_counter11_q = 24'ha00000;
  
  reg [6:0] M_dff1_d, M_dff1_q = 6'h00;
  
  reg [6:0] M_dff2_d, M_dff2_q = 6'h00;
  
  reg [6:0] M_dff3_d, M_dff3_q = 6'h00;
  
  reg [6:0] M_dff4_d, M_dff4_q = 6'h00;
  
  reg [6:0] M_dff5_d, M_dff5_q = 6'h00;
  
  reg [6:0] M_dff6_d, M_dff6_q = 6'h00;
  
  reg [6:0] M_dff7_d, M_dff7_q = 6'h00;
  
  reg [6:0] M_dff8_d, M_dff8_q = 6'h00;
  
  reg [6:0] M_dff9_d, M_dff9_q = 6'h00;
  
  reg [6:0] M_dff10_d, M_dff10_q = 6'h00;
  
  reg [6:0] M_dff11_d, M_dff11_q = 6'h00;
  
  reg [23:0] M_holder1_d, M_holder1_q = 1'h0;
  
  reg [23:0] M_holder2_d, M_holder2_q = 1'h0;
  
  reg [23:0] M_holder3_d, M_holder3_q = 1'h0;
  
  reg [23:0] M_holder4_d, M_holder4_q = 1'h0;
  
  reg [23:0] M_holder5_d, M_holder5_q = 1'h0;
  
  reg [23:0] M_holder6_d, M_holder6_q = 1'h0;
  
  reg [23:0] M_holder7_d, M_holder7_q = 1'h0;
  
  reg [23:0] M_holder8_d, M_holder8_q = 1'h0;
  
  reg [23:0] M_holder9_d, M_holder9_q = 1'h0;
  
  reg [23:0] M_holder10_d, M_holder10_q = 1'h0;
  
  reg [23:0] M_holder11_d, M_holder11_q = 1'h0;
  
  always @* begin
    M_dff4_d = M_dff4_q;
    M_dff5_d = M_dff5_q;
    M_counter8_d = M_counter8_q;
    M_dff6_d = M_dff6_q;
    M_counter9_d = M_counter9_q;
    M_dff7_d = M_dff7_q;
    M_counter6_d = M_counter6_q;
    M_dff8_d = M_dff8_q;
    M_counter7_d = M_counter7_q;
    M_dff9_d = M_dff9_q;
    M_counter4_d = M_counter4_q;
    M_counter5_d = M_counter5_q;
    M_counter2_d = M_counter2_q;
    M_counter3_d = M_counter3_q;
    M_counter1_d = M_counter1_q;
    M_holder2_d = M_holder2_q;
    M_holder3_d = M_holder3_q;
    M_counter11_d = M_counter11_q;
    M_holder1_d = M_holder1_q;
    M_counter10_d = M_counter10_q;
    M_holder8_d = M_holder8_q;
    M_holder11_d = M_holder11_q;
    M_holder9_d = M_holder9_q;
    M_holder6_d = M_holder6_q;
    M_dff1_d = M_dff1_q;
    M_holder7_d = M_holder7_q;
    M_holder10_d = M_holder10_q;
    M_holder4_d = M_holder4_q;
    M_dff3_d = M_dff3_q;
    M_holder5_d = M_holder5_q;
    M_dff2_d = M_dff2_q;
    M_slowclk_d = M_slowclk_q;
    M_dff11_d = M_dff11_q;
    M_dff10_d = M_dff10_q;
    
    M_holder1_d = M_counter1_q + 1'h1;
    if (M_holder1_q[23+0-:1] != M_counter1_q[23+0-:1]) begin
      M_dff1_d = M_dff1_q + 1'h1;
    end
    M_holder2_d = M_counter2_q + 1'h1;
    if (M_holder2_q[23+0-:1] != M_counter2_q[23+0-:1]) begin
      M_dff2_d = M_dff2_q + 1'h1;
    end
    M_holder3_d = M_counter3_q + 1'h1;
    if (M_holder3_q[23+0-:1] != M_counter3_q[23+0-:1]) begin
      M_dff3_d = M_dff3_q + 1'h1;
    end
    M_holder4_d = M_counter4_q + 1'h1;
    if (M_holder4_q[23+0-:1] != M_counter4_q[23+0-:1]) begin
      M_dff4_d = M_dff4_q + 1'h1;
    end
    M_holder5_d = M_counter5_q + 1'h1;
    if (M_holder5_q[23+0-:1] != M_counter5_q[23+0-:1]) begin
      M_dff5_d = M_dff5_q + 1'h1;
    end
    M_holder6_d = M_counter6_q + 1'h1;
    if (M_holder6_q[23+0-:1] != M_counter6_q[23+0-:1]) begin
      M_dff6_d = M_dff6_q + 1'h1;
    end
    M_holder7_d = M_counter7_q + 1'h1;
    if (M_holder7_q[23+0-:1] != M_counter7_q[23+0-:1]) begin
      M_dff7_d = M_dff7_q + 1'h1;
    end
    M_holder8_d = M_counter8_q + 1'h1;
    if (M_holder8_q[23+0-:1] != M_counter8_q[23+0-:1]) begin
      M_dff8_d = M_dff8_q + 1'h1;
    end
    M_holder9_d = M_counter9_q + 1'h1;
    if (M_holder9_q[23+0-:1] != M_counter9_q[23+0-:1]) begin
      M_dff9_d = M_dff9_q + 1'h1;
    end
    M_holder10_d = M_counter10_q + 1'h1;
    if (M_holder10_q[23+0-:1] != M_counter10_q[23+0-:1]) begin
      M_dff10_d = M_dff10_q + 1'h1;
    end
    M_holder11_d = M_counter11_q + 1'h1;
    if (M_holder11_q[23+0-:1] != M_counter11_q[23+0-:1]) begin
      M_dff11_d = M_dff11_q + 1'h1;
    end
    M_counter1_d = M_counter1_q + 1'h1;
    M_counter2_d = M_counter2_q + 1'h1;
    M_counter3_d = M_counter3_q + 1'h1;
    M_counter4_d = M_counter4_q + 1'h1;
    M_counter5_d = M_counter5_q + 1'h1;
    M_counter6_d = M_counter6_q + 1'h1;
    M_counter7_d = M_counter7_q + 1'h1;
    M_counter8_d = M_counter8_q + 1'h1;
    M_counter9_d = M_counter9_q + 1'h1;
    M_counter10_d = M_counter10_q + 1'h1;
    M_counter11_d = M_counter11_q + 1'h1;
    up1 = M_dff1_q;
    up2 = M_dff2_q;
    up3 = M_dff3_q;
    up4 = M_dff4_q;
    up5 = M_dff5_q;
    up6 = M_dff6_q;
    up7 = M_dff7_q;
    up8 = M_dff8_q;
    up9 = M_dff9_q;
    up10 = M_dff10_q;
    up11 = M_dff11_q;
    M_slowclk_d = M_slowclk_q + 1'h1;
    clkslow = M_slowclk_q[1+0-:1];
  end
  
  always @(posedge M_slowclk_q[1+0-:1]) begin
    if (rst == 1'b1) begin
      M_dff2_q <= 6'h00;
    end else begin
      M_dff2_q <= M_dff2_d;
    end
  end
  
  
  always @(posedge M_slowclk_q[1+0-:1]) begin
    if (rst == 1'b1) begin
      M_dff5_q <= 6'h00;
    end else begin
      M_dff5_q <= M_dff5_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_holder1_q <= 1'h0;
    end else begin
      M_holder1_q <= M_holder1_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_holder9_q <= 1'h0;
    end else begin
      M_holder9_q <= M_holder9_d;
    end
  end
  
  
  always @(posedge M_slowclk_q[1+0-:1]) begin
    if (rst == 1'b1) begin
      M_counter2_q <= 24'hd00000;
    end else begin
      M_counter2_q <= M_counter2_d;
    end
  end
  
  
  always @(posedge M_slowclk_q[1+0-:1]) begin
    if (rst == 1'b1) begin
      M_counter10_q <= 24'he00000;
    end else begin
      M_counter10_q <= M_counter10_d;
    end
  end
  
  
  always @(posedge M_slowclk_q[1+0-:1]) begin
    if (rst == 1'b1) begin
      M_dff1_q <= 6'h00;
    end else begin
      M_dff1_q <= M_dff1_d;
    end
  end
  
  
  always @(posedge M_slowclk_q[1+0-:1]) begin
    if (rst == 1'b1) begin
      M_counter6_q <= 24'hb00000;
    end else begin
      M_counter6_q <= M_counter6_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_holder6_q <= 1'h0;
    end else begin
      M_holder6_q <= M_holder6_d;
    end
  end
  
  
  always @(posedge M_slowclk_q[1+0-:1]) begin
    if (rst == 1'b1) begin
      M_counter9_q <= 24'ha00000;
    end else begin
      M_counter9_q <= M_counter9_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_holder11_q <= 1'h0;
    end else begin
      M_holder11_q <= M_holder11_d;
    end
  end
  
  
  always @(posedge M_slowclk_q[1+0-:1]) begin
    if (rst == 1'b1) begin
      M_dff4_q <= 6'h00;
    end else begin
      M_dff4_q <= M_dff4_d;
    end
  end
  
  
  always @(posedge M_slowclk_q[1+0-:1]) begin
    if (rst == 1'b1) begin
      M_counter8_q <= 24'hf00000;
    end else begin
      M_counter8_q <= M_counter8_d;
    end
  end
  
  
  always @(posedge M_slowclk_q[1+0-:1]) begin
    if (rst == 1'b1) begin
      M_dff7_q <= 6'h00;
    end else begin
      M_dff7_q <= M_dff7_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_holder3_q <= 1'h0;
    end else begin
      M_holder3_q <= M_holder3_d;
    end
  end
  
  
  always @(posedge M_slowclk_q[1+0-:1]) begin
    if (rst == 1'b1) begin
      M_counter4_q <= 24'h900000;
    end else begin
      M_counter4_q <= M_counter4_d;
    end
  end
  
  
  always @(posedge M_slowclk_q[1+0-:1]) begin
    if (rst == 1'b1) begin
      M_counter7_q <= 88'hc69d452e88c9cc98c00000;
    end else begin
      M_counter7_q <= M_counter7_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_slowclk_q <= 1'h0;
    end else begin
      M_slowclk_q <= M_slowclk_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_holder7_q <= 1'h0;
    end else begin
      M_holder7_q <= M_holder7_d;
    end
  end
  
  
  always @(posedge M_slowclk_q[1+0-:1]) begin
    if (rst == 1'b1) begin
      M_counter1_q <= 24'h800000;
    end else begin
      M_counter1_q <= M_counter1_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_holder8_q <= 1'h0;
    end else begin
      M_holder8_q <= M_holder8_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_holder5_q <= 1'h0;
    end else begin
      M_holder5_q <= M_holder5_d;
    end
  end
  
  
  always @(posedge M_slowclk_q[1+0-:1]) begin
    if (rst == 1'b1) begin
      M_dff10_q <= 6'h00;
    end else begin
      M_dff10_q <= M_dff10_d;
    end
  end
  
  
  always @(posedge M_slowclk_q[1+0-:1]) begin
    if (rst == 1'b1) begin
      M_counter11_q <= 24'ha00000;
    end else begin
      M_counter11_q <= M_counter11_d;
    end
  end
  
  
  always @(posedge M_slowclk_q[1+0-:1]) begin
    if (rst == 1'b1) begin
      M_dff6_q <= 6'h00;
    end else begin
      M_dff6_q <= M_dff6_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_holder4_q <= 1'h0;
    end else begin
      M_holder4_q <= M_holder4_d;
    end
  end
  
  
  always @(posedge M_slowclk_q[1+0-:1]) begin
    if (rst == 1'b1) begin
      M_counter3_q <= 24'h400000;
    end else begin
      M_counter3_q <= M_counter3_d;
    end
  end
  
  
  always @(posedge M_slowclk_q[1+0-:1]) begin
    if (rst == 1'b1) begin
      M_dff8_q <= 6'h00;
    end else begin
      M_dff8_q <= M_dff8_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_holder10_q <= 1'h0;
    end else begin
      M_holder10_q <= M_holder10_d;
    end
  end
  
  
  always @(posedge M_slowclk_q[1+0-:1]) begin
    if (rst == 1'b1) begin
      M_dff9_q <= 6'h00;
    end else begin
      M_dff9_q <= M_dff9_d;
    end
  end
  
  
  always @(posedge M_slowclk_q[1+0-:1]) begin
    if (rst == 1'b1) begin
      M_counter5_q <= 24'hc00000;
    end else begin
      M_counter5_q <= M_counter5_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_holder2_q <= 1'h0;
    end else begin
      M_holder2_q <= M_holder2_d;
    end
  end
  
  
  always @(posedge M_slowclk_q[1+0-:1]) begin
    if (rst == 1'b1) begin
      M_dff3_q <= 6'h00;
    end else begin
      M_dff3_q <= M_dff3_d;
    end
  end
  
  
  always @(posedge M_slowclk_q[1+0-:1]) begin
    if (rst == 1'b1) begin
      M_dff11_q <= 6'h00;
    end else begin
      M_dff11_q <= M_dff11_d;
    end
  end
  
endmodule
